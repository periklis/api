// Code generated by goyacc -p expr -o logql/v2/expr.y.go logql/v2/expr.y. DO NOT EDIT.

package v2

import __yyfmt__ "fmt"


import (
	"github.com/prometheus/prometheus/pkg/labels"
)

type exprSymType struct {
	yys                  int
	Expr                 Expr
	LogFilterExpr        LogFilterExpr
	LogFiltersExpr       LogFiltersExpr
	LogFormatExpr        *LogFormatExpr
	LogQueryExpr         LogSelectorExpr
	LogMetricExpr        LogMetricSampleExpr
	LogPipelineExpr      LogPipelineExpr
	LogPipelineStageExpr LogPipelineStageExpr
	LogRangeQueryExpr    LogSelectorExpr
	Matcher              *labels.Matcher
	Matchers             []*labels.Matcher
	MetricOp             string
	Range                string
	Filter               string
	Selector             []*labels.Matcher
	Grouping             *grouping
	Labels               []string
	str                  string
	binOp                string
	cmpOp                string
}

const IDENTIFIER = 57346
const STRING = 57347
const RANGE = 57348
const NUMBER = 57349
const MATCHERS = 57350
const LABELS = 57351
const EQ = 57352
const RE = 57353
const NRE = 57354
const OPEN_BRACE = 57355
const CLOSE_BRACE = 57356
const OPEN_BRACKET = 57357
const CLOSE_BRACKET = 57358
const COMMA = 57359
const OPEN_PARENTHESIS = 57360
const CLOSE_PARENTHESIS = 57361
const COUNT_OVER_TIME = 57362
const RATE = 57363
const SUM = 57364
const AVG = 57365
const MAX = 57366
const MIN = 57367
const COUNT = 57368
const STDDEV = 57369
const STDVAR = 57370
const BOTTOMK = 57371
const TOPK = 57372
const BYTES_OVER_TIME = 57373
const BYTES_RATE = 57374
const BOOL = 57375
const JSON = 57376
const REGEXP = 57377
const LOGFMT = 57378
const PIPE_MATCH = 57379
const PIPE_EXACT = 57380
const PIPE = 57381
const LINE_FMT = 57382
const LABEL_FMT = 57383
const UNWRAP = 57384
const AVG_OVER_TIME = 57385
const SUM_OVER_TIME = 57386
const MIN_OVER_TIME = 57387
const MAX_OVER_TIME = 57388
const STDVAR_OVER_TIME = 57389
const STDDEV_OVER_TIME = 57390
const QUANTILE_OVER_TIME = 57391
const FIRST_OVER_TIME = 57392
const LAST_OVER_TIME = 57393
const ABSENT_OVER_TIME = 57394
const BY = 57395
const WITHOUT = 57396
const LABEL_REPLACE = 57397
const IP = 57398
const UNPACK = 57399
const PATTERN = 57400
const OR = 57401
const AND = 57402
const UNLESS = 57403
const CMP_EQ = 57404
const NEQ = 57405
const LT = 57406
const LTE = 57407
const GT = 57408
const GTE = 57409
const ADD = 57410
const SUB = 57411
const MUL = 57412
const DIV = 57413
const MOD = 57414
const POW = 57415

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"RANGE",
	"NUMBER",
	"MATCHERS",
	"LABELS",
	"EQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"COUNT_OVER_TIME",
	"RATE",
	"SUM",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"BYTES_OVER_TIME",
	"BYTES_RATE",
	"BOOL",
	"JSON",
	"REGEXP",
	"LOGFMT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"PIPE",
	"LINE_FMT",
	"LABEL_FMT",
	"UNWRAP",
	"AVG_OVER_TIME",
	"SUM_OVER_TIME",
	"MIN_OVER_TIME",
	"MAX_OVER_TIME",
	"STDVAR_OVER_TIME",
	"STDDEV_OVER_TIME",
	"QUANTILE_OVER_TIME",
	"FIRST_OVER_TIME",
	"LAST_OVER_TIME",
	"ABSENT_OVER_TIME",
	"BY",
	"WITHOUT",
	"LABEL_REPLACE",
	"IP",
	"UNPACK",
	"PATTERN",
	"OR",
	"AND",
	"UNLESS",
	"CMP_EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}

var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16


var exprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 350

var exprAct = [...]int{
	46, 34, 44, 4, 89, 33, 68, 41, 5, 115,
	122, 41, 157, 97, 146, 52, 41, 64, 138, 41,
	82, 84, 85, 102, 45, 37, 132, 131, 47, 48,
	93, 143, 39, 40, 36, 54, 39, 40, 36, 153,
	93, 39, 40, 36, 39, 40, 36, 136, 70, 126,
	104, 128, 76, 126, 71, 127, 104, 94, 42, 47,
	48, 55, 42, 150, 147, 106, 137, 42, 65, 69,
	42, 103, 135, 83, 125, 9, 101, 98, 133, 96,
	72, 99, 10, 11, 24, 25, 27, 28, 26, 29,
	30, 31, 32, 12, 13, 117, 108, 120, 119, 105,
	54, 67, 118, 121, 71, 14, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 66, 79, 8, 130, 41,
	134, 92, 75, 54, 74, 81, 73, 140, 78, 139,
	49, 80, 155, 152, 113, 142, 124, 107, 145, 41,
	95, 54, 114, 9, 39, 40, 36, 151, 72, 91,
	10, 11, 24, 25, 27, 28, 26, 29, 30, 31,
	32, 12, 13, 123, 39, 40, 156, 154, 149, 148,
	42, 144, 129, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 100, 3, 8, 116, 112, 111, 110,
	42, 43, 109, 88, 77, 87, 10, 11, 24, 25,
	27, 28, 26, 29, 30, 31, 32, 12, 13, 86,
	51, 141, 53, 90, 53, 7, 50, 35, 38, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 9,
	2, 8, 1, 0, 77, 0, 10, 11, 24, 25,
	27, 28, 26, 29, 30, 31, 32, 12, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 9,
	0, 8, 0, 0, 6, 0, 10, 11, 24, 25,
	27, 28, 26, 29, 30, 31, 32, 12, 13, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 0, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 0,
	77, 8, 10, 11, 24, 25, 27, 28, 26, 29,
	30, 31, 32, 12, 13, 57, 59, 56, 0, 0,
	0, 61, 62, 0, 0, 14, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 0, 0, 8, 58, 60,
}

var exprPact = [...]int{
	256, -1000, -1000, -1000, -1000, 107, 256, 6, 112, 208,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 107, -1000, 127, 291, -1000, 12, -1000,
	-1000, -1000, -1000, 96, 82, 62, 108, 106, 104, 292,
	114, 111, -1000, 10, -1000, -1000, -1000, -1000, -1000, 204,
	190, 188, 209, 139, -1000, 103, -1000, -1000, 38, 123,
	60, 7, 216, 176, 52, 46, 120, 292, -1000, -1000,
	210, -1000, 187, 184, 183, 182, -1000, -1000, -1000, 117,
	132, -47, 181, -1000, -25, 130, -25, 107, 4, 157,
	119, 55, 36, -1000, -1000, 32, -1000, 167, -1000, -1000,
	-1000, -1000, -1000, 209, 22, 102, 53, -1000, 28, 47,
	-1000, 107, -1000, -1, 292, -1000, 207, -1000, -1000, 118,
	117, -1000, -1000, 13, 166, -1000, -1000, -25, -1000, -5,
	45, -1000, 164, 163, 44, -1000, -25, -1000, 116, 20,
	-1000, -1000, 162, -1000, 115, 161, -7, -1000,
}

var exprPgo = [...]int{
	0, 232, 230, 218, 25, 217, 4, 184, 2, 5,
	1, 6, 15, 216, 215, 8, 23, 0,
}

var exprR1 = [...]int{
	0, 1, 2, 2, 7, 7, 7, 9, 9, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 5, 5,
	4, 4, 6, 6, 6, 6, 11, 11, 11, 11,
	11, 11, 11, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 15, 15, 15, 13, 13, 12,
	12, 12, 12, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 3, 3, 3, 3,
	16, 16, 17, 17, 17, 17,
}

var exprR2 = [...]int{
	0, 1, 1, 1, 1, 2, 3, 1, 2, 1,
	2, 2, 2, 3, 3, 3, 3, 7, 1, 2,
	2, 5, 3, 3, 6, 3, 2, 3, 3, 4,
	5, 6, 2, 4, 6, 5, 5, 4, 6, 7,
	7, 5, 12, 3, 3, 3, 3, 1, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 4, 3, 3,
}

var exprChk = [...]int{
	-1000, -1, -2, -7, -8, -15, 18, -14, 55, 13,
	20, 21, 31, 32, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 22, 23, 26, 24, 25, 27,
	28, 29, 30, -9, -10, -5, 39, -4, -3, 37,
	38, 12, 63, -7, -8, 18, -17, 53, 54, 18,
	-13, 2, -12, 4, -10, -4, 36, 34, 57, 35,
	58, 40, 41, 4, 5, 56, 19, 19, -11, 7,
	-8, -15, 18, 18, 18, 18, -8, 18, 14, 2,
	17, 14, 10, 63, 11, 12, 5, 5, 5, -6,
	4, 10, 18, 2, 19, 17, 19, 6, -9, -15,
	7, -8, -16, 19, 4, -16, 19, 17, -12, 5,
	5, 5, 5, 17, 10, 56, 5, -17, -11, -8,
	-17, -9, 6, 6, 17, 19, 17, 19, 19, 5,
	-6, 5, 4, 56, 18, 19, 19, 19, 19, -9,
	-8, 4, 17, 18, 5, -17, 19, 19, 5, 5,
	19, -17, 17, 19, 5, 17, 5, 19,
}

var exprDef = [...]int{
	0, -2, 1, 2, 3, 4, 0, 0, 0, 0,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 5, 7, 9, 0, 18, 0, 76,
	77, 78, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 47, 0, 8, 19, 10, 11, 12, 0,
	0, 0, 0, 0, 20, 0, 6, 43, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 45,
	0, 46, 0, 0, 0, 0, 13, 14, 15, 16,
	0, 0, 0, 32, 33, 0, 37, 26, 0, 0,
	0, 0, 0, 84, 80, 0, 85, 0, 48, 49,
	50, 51, 52, 0, 0, 0, 0, 35, 0, 0,
	36, 27, 28, 0, 0, 41, 0, 82, 83, 0,
	25, 22, 23, 0, 0, 21, 34, 38, 29, 0,
	0, 81, 0, 0, 0, 39, 30, 40, 0, 0,
	17, 31, 0, 24, 0, 0, 0, 42,
}

var exprTok1 = [...]int{
	1,
}

var exprTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73,
}

var exprTok3 = [...]int{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}


/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := exprPact[state]
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && exprChk[exprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || exprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := exprExca[i]
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = exprTok1[0]
		goto out
	}
	if char < len(exprTok1) {
		token = exprTok1[char]
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = exprTok2[char-exprPrivate]
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = exprTok3[i+0]
		if token == char {
			token = exprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = exprTok2[1] /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = exprPact[exprstate]
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = exprAct[exprn]
	if exprChk[exprn] == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = exprDef[exprstate]
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && exprExca[xi+1] == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = exprExca[xi+0]
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = exprExca[xi+1]
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = exprPact[exprS[exprp].yys] + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = exprAct[exprn] /* simulate a shift of "error" */
					if exprChk[exprstate] == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= exprR2[exprn]
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = exprR1[exprn]
	exprg := exprPgo[exprn]
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = exprAct[exprg]
	} else {
		exprstate = exprAct[exprj]
		if exprChk[exprstate] != -exprn {
			exprstate = exprAct[exprg]
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprlex.(*parser).expr = exprDollar[1].Expr
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogQueryExpr
		}
	case 3:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogMetricExpr
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogQueryExpr = newStreamMatcherExpr(exprDollar[1].Selector)
		}
	case 5:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogQueryExpr = newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), exprDollar[2].LogPipelineExpr)
		}
	case 6:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogQueryExpr = exprDollar[2].LogQueryExpr
		}
	case 7:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogPipelineExpr = LogPipelineExpr{exprDollar[1].LogPipelineStageExpr}
		}
	case 8:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogPipelineExpr = append(exprDollar[1].LogPipelineExpr, exprDollar[2].LogPipelineStageExpr)
		}
	case 9:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("", nil, exprDollar[1].LogFiltersExpr)
		}
	case 10:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("logfmt", nil, nil)
		}
	case 11:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("json", nil, nil)
		}
	case 12:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("unpack", nil, nil)
		}
	case 13:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("regexp", newLogFormatExpr("", map[string]string{"": exprDollar[3].str}), nil)
		}
	case 14:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("pattern", newLogFormatExpr("", map[string]string{"": exprDollar[3].str}), nil)
		}
	case 15:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("line_format", newLogFormatExpr("", map[string]string{"": exprDollar[3].str}), nil)
		}
	case 16:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("label_format", exprDollar[3].LogFormatExpr, nil)
		}
	case 17:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("", nil, LogFiltersExpr{newLogFilterExpr("|", exprDollar[2].str, "ip", exprDollar[6].str)})
		}
	case 18:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogFiltersExpr = LogFiltersExpr{exprDollar[1].LogFilterExpr}
		}
	case 19:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogFiltersExpr = append(exprDollar[1].LogFiltersExpr, exprDollar[2].LogFilterExpr)
		}
	case 20:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogFilterExpr = newLogFilterExpr(exprDollar[1].Filter, "", "", exprDollar[2].str)
		}
	case 21:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogFilterExpr = newLogFilterExpr(exprDollar[1].Filter, "", "ip", exprDollar[4].str)
		}
	case 22:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr("", map[string]string{exprDollar[1].str: exprDollar[3].str})
		}
	case 23:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr("", map[string]string{exprDollar[1].str: exprDollar[3].str})
		}
	case 24:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr("", map[string]string{exprDollar[1].str: "ip(" + exprDollar[5].str + ")"})
		}
	case 25:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr(",", mergeFormatMaps(exprDollar[1].LogFormatExpr.kv, exprDollar[3].LogFormatExpr.kv))
		}
	case 26:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), nil), exprDollar[2].str, nil, false)
		}
	case 27:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), exprDollar[3].LogPipelineExpr), exprDollar[2].str, nil, false)
		}
	case 28:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), exprDollar[2].LogPipelineExpr), exprDollar[3].str, nil, true)
		}
	case 29:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), nil), exprDollar[3].str, nil, false)
		}
	case 30:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), exprDollar[4].LogPipelineExpr), exprDollar[3].str, nil, false)
		}
	case 31:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), exprDollar[4].LogPipelineExpr), exprDollar[3].str, exprDollar[6].Grouping, false)
		}
	case 33:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[3].LogRangeQueryExpr, exprDollar[1].MetricOp, "", nil, nil)
		}
	case 34:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[5].LogRangeQueryExpr, exprDollar[1].MetricOp, exprDollar[3].str, nil, nil)
		}
	case 35:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[3].LogRangeQueryExpr, "", "", exprDollar[5].Grouping, nil)
		}
	case 36:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogMetricExpr, nil, exprDollar[1].MetricOp, "", exprDollar[5].Grouping, nil)
		}
	case 37:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogMetricExpr, nil, exprDollar[1].MetricOp, "", nil, nil)
		}
	case 38:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, nil, nil)
		}
	case 39:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, exprDollar[7].Grouping, nil)
		}
	case 40:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[6].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[4].str, exprDollar[2].Grouping, nil)
		}
	case 41:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[4].LogMetricExpr, nil, exprDollar[1].MetricOp, "", exprDollar[2].Grouping, nil)
		}
	case 42:
		exprDollar = exprS[exprpt-12 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogMetricExpr, nil, OpLabelReplace, "", nil, []string{exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str})
		}
	case 43:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogMetricExpr = exprDollar[2].LogMetricExpr
		}
	case 44:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 45:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 46:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
		}
	case 47:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Matchers = []*labels.Matcher{exprDollar[1].Matcher}
		}
	case 48:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matchers = append(exprDollar[1].Matchers, exprDollar[3].Matcher)
		}
	case 49:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = mustNewLabelMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 50:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = mustNewLabelMatcher(labels.MatchNotEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 51:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = mustNewLabelMatcher(labels.MatchRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 52:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = mustNewLabelMatcher(labels.MatchNotRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 53:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeCount
		}
	case 54:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeRate
		}
	case 55:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeBytes
		}
	case 56:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeBytesRate
		}
	case 57:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeAvg
		}
	case 58:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeSum
		}
	case 59:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeMin
		}
	case 60:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeMax
		}
	case 61:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeStdvar
		}
	case 62:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeStddev
		}
	case 63:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeQuantile
		}
	case 64:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeFirst
		}
	case 65:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeLast
		}
	case 66:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeAbsent
		}
	case 67:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeSum
		}
	case 68:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeAvg
		}
	case 69:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeCount
		}
	case 70:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeMax
		}
	case 71:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeMin
		}
	case 72:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeStddev
		}
	case 73:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeStdvar
		}
	case 74:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeBottomK
		}
	case 75:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeTopK
		}
	case 76:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "|~"
		}
	case 77:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "|="
		}
	case 78:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "!~"
		}
	case 79:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "!="
		}
	case 80:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 81:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 82:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: false, groups: exprDollar[3].Labels}
		}
	case 83:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: true, groups: exprDollar[3].Labels}
		}
	case 84:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: false, groups: nil}
		}
	case 85:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: true, groups: nil}
		}
	}
	goto exprstack /* stack new state and value */
}
