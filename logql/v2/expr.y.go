// Code generated by goyacc -p expr -o logql/v2/expr.y.go logql/v2/expr.y. DO NOT EDIT.

package v2

import __yyfmt__ "fmt"


import (
	"github.com/prometheus/prometheus/pkg/labels"
)

type exprSymType struct {
	yys                  int
	Expr                 Expr
	LogBinaryOpExpr      LogBinaryOpExpr
	LogFilterExpr        LogFilterExpr
	LogFiltersExpr       LogFiltersExpr
	LogFormatExpr        *LogFormatExpr
	LogQueryExpr         LogSelectorExpr
	LogMetricExpr        LogMetricSampleExpr
	LogNumberExpr        LogNumberExpr
	LogPipelineExpr      LogPipelineExpr
	LogPipelineStageExpr LogPipelineStageExpr
	LogRangeQueryExpr    LogSelectorExpr
	Matcher              *labels.Matcher
	Matchers             []*labels.Matcher
	MetricOp             string
	BinaryOpOptions      BinaryOpOptions
	Range                string
	Filter               string
	Selector             []*labels.Matcher
	Grouping             *grouping
	Labels               []string
	str                  string
	binaryOp             string
	ComparisonOp         string
}

const IDENTIFIER = 57346
const STRING = 57347
const RANGE = 57348
const NUMBER = 57349
const MATCHERS = 57350
const LABELS = 57351
const EQ = 57352
const RE = 57353
const NRE = 57354
const OPEN_BRACE = 57355
const CLOSE_BRACE = 57356
const OPEN_BRACKET = 57357
const CLOSE_BRACKET = 57358
const COMMA = 57359
const OPEN_PARENTHESIS = 57360
const CLOSE_PARENTHESIS = 57361
const COUNT_OVER_TIME = 57362
const RATE = 57363
const SUM = 57364
const AVG = 57365
const MAX = 57366
const MIN = 57367
const COUNT = 57368
const STDDEV = 57369
const STDVAR = 57370
const BOTTOMK = 57371
const TOPK = 57372
const BYTES_OVER_TIME = 57373
const BYTES_RATE = 57374
const BOOL = 57375
const JSON = 57376
const REGEXP = 57377
const LOGFMT = 57378
const PIPE_MATCH = 57379
const PIPE_EXACT = 57380
const PIPE = 57381
const LINE_FMT = 57382
const LABEL_FMT = 57383
const UNWRAP = 57384
const AVG_OVER_TIME = 57385
const SUM_OVER_TIME = 57386
const MIN_OVER_TIME = 57387
const MAX_OVER_TIME = 57388
const STDVAR_OVER_TIME = 57389
const STDDEV_OVER_TIME = 57390
const QUANTILE_OVER_TIME = 57391
const FIRST_OVER_TIME = 57392
const LAST_OVER_TIME = 57393
const ABSENT_OVER_TIME = 57394
const BY = 57395
const WITHOUT = 57396
const LABEL_REPLACE = 57397
const IP = 57398
const UNPACK = 57399
const PATTERN = 57400
const OR = 57401
const AND = 57402
const UNLESS = 57403
const CMP_EQ = 57404
const NEQ = 57405
const LT = 57406
const LTE = 57407
const GT = 57408
const GTE = 57409
const ADD = 57410
const SUB = 57411
const MUL = 57412
const DIV = 57413
const MOD = 57414
const POW = 57415

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"RANGE",
	"NUMBER",
	"MATCHERS",
	"LABELS",
	"EQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"COUNT_OVER_TIME",
	"RATE",
	"SUM",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"BYTES_OVER_TIME",
	"BYTES_RATE",
	"BOOL",
	"JSON",
	"REGEXP",
	"LOGFMT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"PIPE",
	"LINE_FMT",
	"LABEL_FMT",
	"UNWRAP",
	"AVG_OVER_TIME",
	"SUM_OVER_TIME",
	"MIN_OVER_TIME",
	"MAX_OVER_TIME",
	"STDVAR_OVER_TIME",
	"STDDEV_OVER_TIME",
	"QUANTILE_OVER_TIME",
	"FIRST_OVER_TIME",
	"LAST_OVER_TIME",
	"ABSENT_OVER_TIME",
	"BY",
	"WITHOUT",
	"LABEL_REPLACE",
	"IP",
	"UNPACK",
	"PATTERN",
	"OR",
	"AND",
	"UNLESS",
	"CMP_EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}

var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16


var exprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 453

var exprAct = [...]int{
	66, 54, 53, 4, 144, 5, 74, 166, 7, 106,
	3, 46, 64, 112, 2, 43, 44, 45, 46, 63,
	11, 192, 77, 57, 67, 68, 14, 61, 203, 202,
	147, 8, 149, 15, 16, 29, 30, 32, 33, 31,
	34, 35, 36, 37, 17, 18, 41, 42, 43, 44,
	45, 46, 59, 60, 56, 92, 19, 20, 21, 22,
	23, 24, 25, 26, 27, 28, 241, 180, 10, 108,
	102, 109, 65, 116, 110, 117, 168, 240, 62, 93,
	204, 12, 13, 148, 152, 153, 150, 151, 218, 155,
	126, 170, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 207, 67, 68, 196,
	196, 198, 197, 160, 233, 64, 229, 164, 181, 165,
	162, 103, 63, 169, 225, 237, 224, 173, 38, 39,
	40, 47, 48, 51, 52, 49, 50, 41, 42, 43,
	44, 45, 46, 39, 40, 47, 48, 51, 52, 49,
	50, 41, 42, 43, 44, 45, 46, 183, 209, 187,
	188, 185, 92, 186, 190, 191, 110, 184, 47, 48,
	51, 52, 49, 50, 41, 42, 43, 44, 45, 46,
	208, 168, 206, 201, 195, 122, 124, 125, 155, 194,
	159, 158, 92, 92, 61, 212, 167, 213, 105, 214,
	104, 223, 205, 154, 236, 156, 115, 114, 113, 220,
	221, 69, 11, 232, 92, 61, 231, 178, 14, 59,
	60, 56, 211, 111, 230, 15, 16, 29, 30, 32,
	33, 31, 34, 35, 36, 37, 17, 18, 123, 217,
	59, 60, 56, 61, 216, 62, 119, 193, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 118, 172,
	10, 120, 171, 157, 163, 121, 62, 71, 59, 60,
	14, 179, 70, 12, 13, 8, 222, 15, 16, 29,
	30, 32, 33, 31, 34, 35, 36, 37, 17, 18,
	239, 238, 61, 235, 62, 234, 228, 227, 226, 210,
	19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
	219, 200, 10, 9, 189, 199, 107, 59, 60, 56,
	61, 182, 14, 177, 61, 12, 13, 111, 176, 15,
	16, 29, 30, 32, 33, 31, 34, 35, 36, 37,
	17, 18, 175, 62, 174, 59, 60, 56, 143, 59,
	60, 56, 19, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 215, 161, 10, 142, 73, 141, 75, 61,
	145, 62, 75, 146, 14, 62, 72, 12, 13, 8,
	6, 15, 16, 29, 30, 32, 33, 31, 34, 35,
	36, 37, 17, 18, 59, 60, 56, 76, 101, 55,
	58, 1, 0, 0, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 0, 0, 10, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 95, 97,
	94, 0, 0, 0, 99, 100, 0, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 96, 98,
}

var exprPact = [...]int{
	13, -1000, 69, -1000, -1000, -1000, -1000, 312, 361, 54,
	193, -1000, 265, 260, 364, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -11, -11,
	-11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
	-11, -11, -11, 312, -1000, 231, 394, -1000, 65, -1000,
	-1000, -1000, -1000, 181, 179, 309, 190, 189, 188, 13,
	-1000, -1000, 244, 251, -1000, 175, 13, -1000, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, -1000, -1000, -1000, -1000, -1000, 362, 360, 343,
	366, 20, -1000, 185, -1000, -1000, 186, 246, 172, 171,
	357, 361, 69, 257, 177, 72, 245, 242, -1000, -1000,
	368, -1000, 339, 337, 323, 318, 83, 106, 106, -55,
	-55, -62, -62, -62, -62, -22, -22, -22, -22, -22,
	-22, -1000, -1000, -1000, 200, 261, 62, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 316, -1000, -29, 205, -29, -29,
	308, 312, 15, 230, 170, 165, 93, -1000, -1000, 92,
	-1000, 310, 306, -1000, -1000, -1000, -1000, -1000, 366, 24,
	-1000, 184, 163, -1000, 87, 161, 139, -1000, -1000, -1000,
	312, 280, 203, 13, -1000, -1000, 358, -1000, -1000, 227,
	222, 200, -1000, -1000, 70, 305, -1000, -1000, -29, -29,
	270, -1000, 182, 107, 105, -1000, 293, 292, 291, 97,
	-1000, -1000, -1000, -29, -1000, -1000, 199, 196, 95, -1000,
	-1000, 290, 288, -1000, 187, 108, 286, 285, 58, 47,
	-1000, -1000,
}

var exprPgo = [...]int{
	0, 401, 13, 400, 5, 23, 399, 4, 10, 3,
	380, 2, 1, 9, 6, 376, 397, 373, 313, 8,
	7, 0,
}

var exprR1 = [...]int{
	0, 1, 2, 2, 2, 2, 8, 8, 8, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 6, 6, 5, 5, 7, 7, 7, 7, 13,
	13, 13, 13, 13, 13, 13, 13, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	10, 10, 10, 16, 16, 19, 19, 19, 15, 15,
	14, 14, 14, 14, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 3, 3, 3,
	3, 17, 17, 17, 17, 17, 17, 17, 20, 20,
	21, 21, 21, 21,
}

var exprR2 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 2, 3, 1,
	2, 1, 2, 2, 2, 3, 3, 3, 3, 4,
	7, 1, 2, 2, 5, 3, 3, 6, 3, 2,
	3, 3, 4, 5, 5, 6, 2, 4, 6, 5,
	5, 4, 6, 7, 7, 5, 12, 5, 4, 6,
	7, 7, 5, 12, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	1, 2, 2, 0, 1, 3, 3, 3, 1, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 3, 3,
}

var exprChk = [...]int{
	-1000, -1, -2, -8, -9, -4, -10, -19, 18, -18,
	55, 7, 68, 69, 13, 20, 21, 31, 32, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 22,
	23, 26, 24, 25, 27, 28, 29, 30, 59, 60,
	61, 68, 69, 70, 71, 72, 73, 62, 63, 66,
	67, 64, 65, -11, -12, -6, 39, -5, -3, 37,
	38, 12, 63, -8, -9, 18, -21, 53, 54, 18,
	7, 7, -15, 2, -14, 4, -16, 33, -16, -16,
	-16, -16, -16, -16, -16, -16, -16, -16, -16, -16,
	-16, -16, -12, -5, 36, 34, 57, 35, 58, 40,
	41, 4, 5, 56, 19, 19, -13, 7, -9, -4,
	-19, 18, -2, 18, 18, 18, -9, -4, 14, 2,
	17, 14, 10, 63, 11, 12, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 5, 5, 5, -7, 4, -17, 10, 63, 12,
	66, 67, 64, 65, 18, 2, 19, 17, 19, 19,
	-11, 6, -19, 7, -9, -4, -20, 19, 4, -20,
	19, 17, 17, -14, 5, 5, 5, 5, 17, 10,
	5, 56, 5, -21, -13, -9, -4, -21, -21, 6,
	-11, -11, 6, 17, 19, 19, 17, 19, 19, 5,
	5, -7, 5, 4, 56, 18, 19, 19, 19, 19,
	19, 19, -11, -9, -4, 4, 17, 17, 18, 5,
	-21, -21, 6, 19, 19, 19, 5, 5, 5, 19,
	-21, 17, 17, 19, 5, 5, 17, 17, 5, 5,
	19, 19,
}

var exprDef = [...]int{
	0, -2, 1, 2, 3, 4, 5, 6, 0, 0,
	0, 70, 0, 0, 0, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 7, 9, 11, 0, 21, 0, 107,
	108, 109, 110, 0, 0, 0, 0, 0, 0, 0,
	71, 72, 0, 0, 78, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 10, 22, 12, 13, 14, 0, 0, 0,
	0, 0, 23, 0, 8, 54, 0, 70, 3, 4,
	6, 0, 0, 0, 0, 0, 3, 4, 75, 76,
	0, 77, 0, 0, 0, 0, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 15, 16, 17, 18, 0, 0, 111, 112, 113,
	114, 115, 116, 117, 0, 36, 37, 0, 41, 48,
	7, 29, 6, 70, 3, 4, 0, 122, 118, 0,
	123, 0, 0, 79, 80, 81, 82, 83, 0, 0,
	19, 0, 0, 39, 0, 3, 4, 40, 47, 31,
	30, 0, 0, 0, 45, 52, 0, 120, 121, 0,
	0, 28, 25, 26, 0, 0, 24, 38, 42, 49,
	0, 32, 0, 3, 4, 119, 0, 0, 0, 0,
	43, 50, 34, 33, 44, 51, 0, 0, 0, 20,
	35, 0, 0, 27, 0, 0, 0, 0, 0, 0,
	46, 53,
}

var exprTok1 = [...]int{
	1,
}

var exprTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73,
}

var exprTok3 = [...]int{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}


/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := exprPact[state]
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && exprChk[exprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || exprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := exprExca[i]
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = exprTok1[0]
		goto out
	}
	if char < len(exprTok1) {
		token = exprTok1[char]
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = exprTok2[char-exprPrivate]
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = exprTok3[i+0]
		if token == char {
			token = exprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = exprTok2[1] /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = exprPact[exprstate]
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = exprAct[exprn]
	if exprChk[exprn] == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = exprDef[exprstate]
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && exprExca[xi+1] == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = exprExca[xi+0]
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = exprExca[xi+1]
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = exprPact[exprS[exprp].yys] + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = exprAct[exprn] /* simulate a shift of "error" */
					if exprChk[exprstate] == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= exprR2[exprn]
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = exprR1[exprn]
	exprg := exprPgo[exprn]
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = exprAct[exprg]
	} else {
		exprstate = exprAct[exprj]
		if exprChk[exprstate] != -exprn {
			exprstate = exprAct[exprg]
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprlex.(*parser).expr = exprDollar[1].Expr
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogQueryExpr
		}
	case 3:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogMetricExpr
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogBinaryOpExpr
		}
	case 5:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogNumberExpr
		}
	case 6:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogQueryExpr = newStreamMatcherExpr(exprDollar[1].Selector)
		}
	case 7:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogQueryExpr = newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), exprDollar[2].LogPipelineExpr)
		}
	case 8:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogQueryExpr = exprDollar[2].LogQueryExpr
		}
	case 9:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogPipelineExpr = LogPipelineExpr{exprDollar[1].LogPipelineStageExpr}
		}
	case 10:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogPipelineExpr = append(exprDollar[1].LogPipelineExpr, exprDollar[2].LogPipelineStageExpr)
		}
	case 11:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("", nil, exprDollar[1].LogFiltersExpr)
		}
	case 12:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("logfmt", nil, nil)
		}
	case 13:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("json", nil, nil)
		}
	case 14:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("unpack", nil, nil)
		}
	case 15:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("regexp", newLogFormatExpr("", LogFormatValues{"": newLogFormatValue(exprDollar[3].str, false)}), nil)
		}
	case 16:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("pattern", newLogFormatExpr("", LogFormatValues{"": newLogFormatValue(exprDollar[3].str, false)}), nil)
		}
	case 17:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("line_format", newLogFormatExpr("", LogFormatValues{"": newLogFormatValue(exprDollar[3].str, false)}), nil)
		}
	case 18:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("label_format", exprDollar[3].LogFormatExpr, nil)
		}
	case 19:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("", nil, LogFiltersExpr{newLogFilterExpr("|", exprDollar[2].str, exprDollar[3].ComparisonOp, "", exprDollar[4].str)})
		}
	case 20:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogPipelineStageExpr = newLogPipelineStageExpr("", nil, LogFiltersExpr{newLogFilterExpr("|", exprDollar[2].str, exprDollar[3].ComparisonOp, "ip", exprDollar[6].str)})
		}
	case 21:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogFiltersExpr = LogFiltersExpr{exprDollar[1].LogFilterExpr}
		}
	case 22:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogFiltersExpr = append(exprDollar[1].LogFiltersExpr, exprDollar[2].LogFilterExpr)
		}
	case 23:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogFilterExpr = newLogFilterExpr(exprDollar[1].Filter, "", "", "", exprDollar[2].str)
		}
	case 24:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogFilterExpr = newLogFilterExpr(exprDollar[1].Filter, "", "", "ip", exprDollar[4].str)
		}
	case 25:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr("", LogFormatValues{exprDollar[1].str: newLogFormatValue(exprDollar[3].str, false)})
		}
	case 26:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr("", LogFormatValues{exprDollar[1].str: newLogFormatValue(exprDollar[3].str, true)})
		}
	case 27:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr("", LogFormatValues{exprDollar[1].str: newLogFormatValue("ip("+exprDollar[5].str+")", false)})
		}
	case 28:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr(",", mergeFormatMaps(exprDollar[1].LogFormatExpr.kv, exprDollar[3].LogFormatExpr.kv))
		}
	case 29:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), nil), exprDollar[2].str, nil, false)
		}
	case 30:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), exprDollar[3].LogPipelineExpr), exprDollar[2].str, nil, false)
		}
	case 31:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), exprDollar[2].LogPipelineExpr), exprDollar[3].str, nil, true)
		}
	case 32:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), nil), exprDollar[3].str, nil, false)
		}
	case 33:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), exprDollar[4].LogPipelineExpr), exprDollar[3].str, nil, false)
		}
	case 34:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), exprDollar[3].LogPipelineExpr), exprDollar[5].str, nil, true)
		}
	case 35:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), exprDollar[4].LogPipelineExpr), exprDollar[3].str, exprDollar[6].Grouping, false)
		}
	case 37:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[3].LogRangeQueryExpr, exprDollar[1].MetricOp, "", nil, nil)
		}
	case 38:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[5].LogRangeQueryExpr, exprDollar[1].MetricOp, exprDollar[3].str, nil, nil)
		}
	case 39:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[3].LogRangeQueryExpr, "", "", exprDollar[5].Grouping, nil)
		}
	case 40:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogMetricExpr, nil, exprDollar[1].MetricOp, "", exprDollar[5].Grouping, nil)
		}
	case 41:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogMetricExpr, nil, exprDollar[1].MetricOp, "", nil, nil)
		}
	case 42:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, nil, nil)
		}
	case 43:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, exprDollar[7].Grouping, nil)
		}
	case 44:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[6].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[4].str, exprDollar[2].Grouping, nil)
		}
	case 45:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[4].LogMetricExpr, nil, exprDollar[1].MetricOp, "", exprDollar[2].Grouping, nil)
		}
	case 46:
		exprDollar = exprS[exprpt-12 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogMetricExpr, nil, OpLabelReplace, "", nil, []string{exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str})
		}
	case 47:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, "", exprDollar[5].Grouping, nil)
		}
	case 48:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, "", nil, nil)
		}
	case 49:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, nil, nil)
		}
	case 50:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, exprDollar[7].Grouping, nil)
		}
	case 51:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[6].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, exprDollar[4].str, exprDollar[2].Grouping, nil)
		}
	case 52:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[4].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, "", exprDollar[2].Grouping, nil)
		}
	case 53:
		exprDollar = exprS[exprpt-12 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogBinaryOpExpr, nil, OpLabelReplace, "", nil, []string{exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str})
		}
	case 54:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogMetricExpr = exprDollar[2].LogMetricExpr
		}
	case 55:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("or", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 56:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("and", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 57:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("unless", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 58:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("+", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 59:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("-", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 60:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("*", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 61:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("/", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 62:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("%", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 63:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("^", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 64:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("==", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 65:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("!=", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 66:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr(">", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 67:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr(">=", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 68:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("<", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 69:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("<=", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 70:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogNumberExpr = newLogNumberExpr(exprDollar[1].str, false)
		}
	case 71:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogNumberExpr = newLogNumberExpr(exprDollar[2].str, false)
		}
	case 72:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogNumberExpr = newLogNumberExpr(exprDollar[2].str, true)
		}
	case 73:
		exprDollar = exprS[exprpt-0 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = BinaryOpOptions{}
		}
	case 74:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = BinaryOpOptions{ReturnBool: true}
		}
	case 75:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 76:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 77:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
		}
	case 78:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Matchers = []*labels.Matcher{exprDollar[1].Matcher}
		}
	case 79:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matchers = append(exprDollar[1].Matchers, exprDollar[3].Matcher)
		}
	case 80:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = mustNewLabelMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 81:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = mustNewLabelMatcher(labels.MatchNotEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 82:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = mustNewLabelMatcher(labels.MatchRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 83:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = mustNewLabelMatcher(labels.MatchNotRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 84:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeCount
		}
	case 85:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeRate
		}
	case 86:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeBytes
		}
	case 87:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeBytesRate
		}
	case 88:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeAvg
		}
	case 89:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeSum
		}
	case 90:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeMin
		}
	case 91:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeMax
		}
	case 92:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeStdvar
		}
	case 93:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeStddev
		}
	case 94:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeQuantile
		}
	case 95:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeFirst
		}
	case 96:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeLast
		}
	case 97:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeAbsent
		}
	case 98:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeSum
		}
	case 99:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeAvg
		}
	case 100:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeCount
		}
	case 101:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeMax
		}
	case 102:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeMin
		}
	case 103:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeStddev
		}
	case 104:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeStdvar
		}
	case 105:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeBottomK
		}
	case 106:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeTopK
		}
	case 107:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "|~"
		}
	case 108:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "|="
		}
	case 109:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "!~"
		}
	case 110:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "!="
		}
	case 111:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "="
		}
	case 112:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "!="
		}
	case 113:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "!~"
		}
	case 114:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = ">"
		}
	case 115:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = ">="
		}
	case 116:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "<"
		}
	case 117:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "<="
		}
	case 118:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 119:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 120:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: false, groups: exprDollar[3].Labels}
		}
	case 121:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: true, groups: exprDollar[3].Labels}
		}
	case 122:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: false, groups: nil}
		}
	case 123:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: true, groups: nil}
		}
	}
	goto exprstack /* stack new state and value */
}
